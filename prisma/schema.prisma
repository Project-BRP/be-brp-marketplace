// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TxStatus {
  UNPAID
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id             String        @id @map("id")
  email          String        @unique @map("email")
  password       String        @map("password")
  phoneNumber    String        @map("phone_number")
  name           String        @map("name")
  profilePicture String?       @map("profile_picture")
  role           Role          @default(USER) @map("role")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  cart           Cart?
  transaction    Transaction[]

  @@map("users")
}

model Product {
  id                     String   @id @map("id")
  name                   String   @unique @map("name")
  description            String   @map("description")
  productTypeId          String?  @map("product_type_id")
  composition            String   @map("composition")
  imageUrl               String?  @map("image_url")
  storageInstructions    String   @map("storage_instructions")
  expiredDurationInYears Int      @map("expired_duration_in_years")
  usageInstructions      String   @map("usage_instructions")
  benefits               String   @map("benefits")
  isDeleted              Boolean  @default(false) @map("is_deleted")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  productType     ProductType?     @relation(fields: [productTypeId], references: [id], onDelete: SetNull)
  productVariants ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id           String   @id @map("id")
  productId    String   @map("product_id")
  weight_in_kg Int      @map("weight_in_kg")
  packagingId  String?  @map("packaging_id")
  imageUrl     String?  @map("image_url")
  stock        Int      @default(0) @map("stock")
  priceRupiah  Int      @map("price_rupiah")
  isDeleted    Boolean  @default(false) @map("is_deleted")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  packaging       Packaging?        @relation(fields: [packagingId], references: [id], onDelete: SetNull)
  cartItem        CartItem[]
  transactionItem TransactionItem[]

  @@map("product_variants")
}

model Packaging {
  id        String   @id @map("id")
  name      String   @unique @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productVariants ProductVariant[]

  @@map("packagings")
}

model ProductType {
  id        String   @id @map("id")
  name      String   @unique @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("product_types")
}

model Cart {
  id        String   @id @map("id")
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @map("id")
  cartId    String   @map("cart_id")
  variantId String   @map("variant_id")
  quantity  Int      @default(1) @map("quantity")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId], name: "unique_cart_variant")
  @@map("cart_items")
}

model CurrentPPN {
  id         String   @id @map("id")
  name       String   @unique @default("PPN Saat Ini") @map("name")
  percentage Int      @map("percentage")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("current_ppn")
}

model Transaction {
  id              String   @id @map("id")
  userId          String   @map("user_id")
  userName        String   @map("user_name")
  userEmail       String   @map("user_email")
  userPhoneNumber String   @map("user_phone_number")
  status          TxStatus @default(UNPAID) @map("status")
  cleanPrice      Int      @map("clean_price")
  priceWithPPN    Int      @map("price_with_ppn")
  totalPrice      Int      @map("total_price")
  PPNPercentage   Int?     @map("ppn_percentage")
  snapToken       String?  @map("snap_token")
  snapUrl         String?  @map("snap_url")
  city            String   @map("city")
  province        String   @map("province")
  postalCode      String   @map("postal_code")
  shippingAddress String   @map("shipping_address")
  shippingCost    Int?     @map("shipping_cost")
  paymentMethod   String?  @map("payment_method")
  cancelReason    String?  @map("cancel_reason")
  isRefundFailed  Boolean  @default(false) @map("is_refund_failed")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id            String   @id @map("id")
  transactionId String   @map("transaction_id")
  variantId     String   @map("variant_id")
  quantity      Int      @default(1) @map("quantity")
  priceRupiah   Int      @map("price_rupiah")
  isStockIssue  Boolean  @default(false) @map("is_stock_issue")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  transaction Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  variant     ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([transactionId, variantId], name: "unique_transaction_variant")
  @@map("transaction_items")
}
